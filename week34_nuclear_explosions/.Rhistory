image_list[i] = (image_read(paste("C:/Users/kswp234/Documents/frame", i, ".png", sep = "")))
}
install.packages('animation')
library(animation)
ani.options(interval = 0.2, nmax = 10)
for( i in 1:ani.options('nmax')){
print(image_list[[i]])
ani.pause()
}
for( i in 1:ani.options('nmax')){
print(image_list[[i]])
ani.pause()
}
image_list = list()
image_list[[i]] = (image_read(paste("C:/Users/kswp234/Documents/frame", i, ".png", sep = "")))
for(i in 1:360){
image_list[[i]] = (image_read(paste("C:/Users/kswp234/Documents/frame", i, ".png", sep = "")))
}
ani.options(interval = 0.2, nmax = 10)
for( i in 1:ani.options('nmax')){
print(image_list[[i]])
ani.pause()
}
saveGIF( {
ani.options(interval = 0.05, nmax = 360)
for( i in 1:ani.options('nmax')){
print(image_list[[i]])
ani.pause()
}
}, movie.name = 'plot.gif')
plot_3d(gg, multicore = TRUE, height = 3, width = 5)
plot_3d(gg)
plot_3d(gg, zscale = 50)
plot_3d(gg, zscale = 50, heightmap = 50)
install.packages('mapmate')
library(mapmapte)
library(mapmate)
devtools::install_github("leonawicz/mapmate")
library(mapmate)
p <- "frame%d.png"
out <- "frames.gif"
# 10 fps gif
ffmpeg(pattern = p, output = out, rate = 10)
plot_gg(gg, multicore = TRUE, height = 3, width = 5)
for(i in 1:360) {
render_camera(theta = thetavec[i],phi = phivecfull[i],zoom = zoomvecfull[i])
#uncomment the next line to save each frame to the working directory
render_snapshot()
}
for(i in 359:360) {
render_camera(theta = thetavec[i],phi = phivecfull[i],zoom = zoomvecfull[i])
#uncomment the next line to save each frame to the working directory
render_snapshot()
}
plot_gg(gg, multicore = TRUE, height = 3, width = 5)
phivec = 20 + 70 * 1/(1 + exp(seq(-5, 10, length.out = 180)))
phivecfull = c(phivec, rev(phivec))
thetavec = 270 + 90 * sin(seq(0,359,length.out = 360) * pi/180)
zoomvec = 0.5 + 0.5 * 1/(1 + exp(seq(-5, 10, length.out = 180)))
zoomvecfull = c(zoomvec, rev(zoomvec))
for(i in 359:360) {
render_camera(theta = thetavec[i],phi = phivecfull[i],zoom = zoomvecfull[i])
#uncomment the next line to save each frame to the working directory
render_snapshot()
}
png(image_list[[i]])
png("frame1.png")
image = png()
for(i in 1:360){
print(image_list[[i]])
}
dev.off()
animation = image_animate(image, 10, dispose = 'previous')
rbind(image_list[[1]], image_list[[2]])
p = "frame%d.png"
out = "frames.gif"
ffmpeg(pattern = p, output = out, rate = 10)
library(tidyverse)
library(rayshader)
library(ISLR)
data()
attach(Titanic)
attach(Titanic)
load(Titanic)
require(Titanic)
View(Titanic)
library(rayshader)
View(diamonds)
?diamonds
ggplot(diamonds, aes(x = x, y = y, fill = z)) +
geom_bar()
ggplot(diamonds, aes(x = x, y = y, fill = z)) +
geom_line()
plot_gg(gg)
gg = ggplot(diamonds, aes(x = x, y = y, fill = z)) +
geom_line()
plot_gg(gg)
gg = ggplot(diamonds, aes(x = color, y = cut, fill = price)) +
geom_bar()
plot_gg(gg)
?nlevel
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
facet_wrap(clarity~.) +
scale_fill_viridis_c(option = "A")
plot_gg(ggdiamonds)
plot_gg(ggdiamonds)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
scale_fill_viridis_c(option = "D")
ggdiamonds
print(ggdiamonds)
plot_gg(ggdiamonds)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=price, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
scale_fill_viridis_c(option = "D")
print(ggdiamonds)
?diamonds
plot_gg(ggdiamonds)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=carat, y=price, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
scale_fill_viridis_c(option = "D")
plot_gg(ggdiamonds)
plot_gg(ggdiamonds, width = 7, height = 7, phi = 10, theta = 30, multicore = TRUE)
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE)
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 0.7)
render_snapshot('diamonds.png')
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 1.7)
render_snapshot('diamonds.png')
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 0.3)
render_snapshot('diamonds.png')
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 0.5)
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 0.5)
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
scale_fill_viridis_c(option = "D")
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 0.5)
render_snapshot('diamonds.png')
install.packages('rvest')
ggdiamonds = ggplot(diamonds) +
stat_density_2d(aes(x=x, y=depth, fill = stat(nlevel)),
geom = "polygon", n = 100, bins = 10,contour = TRUE) +
scale_fill_viridis_c(option = "D")
plot_gg(ggdiamonds, width = 7, height = 7, phi = 30, theta = 30, multicore = TRUE, zoom = 0.5)
render_snapshot('diamonds.png')
library(rvest)
website_link = "https://www.amazon.in/dp/B07HBC65BV/ref=cm_sw_r_wa_apa_i_Kt8qDbR619NFK"
tech_info = read_html(website_link) %>% html_text
tech_info
tech_info = read_html(website_link) %>% html_text %>% html_attr(".label")
tech_info = read_html(website_link) %>% html_text %>% html_attr(.label)
tech_info = read_html(website_link) %>% html_nodes(".label") %>% html_text()
tech_info
tech_info = read_html(website_link) %>% html_nodes(".techD") %>% html_text()
html_text
tech_info
tech_info = read_html(website_link) %>% html_nodes(".prodDetails") %>% html_text()
tech_info = read_html(website_link) %>% html_nodes("#prodDetails") %>% html_text()
tech_info
tech_info = read_html(website_link) %>% html_nodes("td") %>% html_text()
tech_info
tech_info[1:10]
tech_info = read_html(website_link) %>% html_nodes(".label", ".value") %>% html_text()
tech_info = read_html(website_link) %>% html_nodes(".label") %>% html_text()
tech_info = read_html(website_link) %>% html_nodes(".secHeader , .value , .label") %>% html_text()
head(tech_info)
tech_info[1:30]
tech_info[50:76]
tech_info[50:76]
tail(tech_info)
tech_info[2]
class(tech_info[2]
)
class(tech_info[[2]])
laptop_details = data.frame('tech_detail' = character(), 'value' = character())
i += 2
i = 1
j = 1
laptop_details = data.frame('tech_detail' = character(), 'value' = character())
while(tech_info[i] != "Additional Information"){
laptop_details$tech_detail[j] = tech_info[i]
laptop_details$value[j] = tech_info[i+1]
i = i +2
j = j + 1
}
while(tech_info[i] != "Additional Information"){
laptop_details[j, 1] = tech_info[i]
laptop_details[j, 2]] = tech_info[i+1]
i = i +2
j = j + 1
}
while(tech_info[i] != "Additional Information"){
laptop_details[j, 1] = tech_info[i]
laptop_details[j, 2] = tech_info[i+1]
i = i +2
j = j + 1
}
View(laptop_details)
which(tech_info== "Additional Information")
tech_info == "Additional Information"
tech_info
tech_info = stringr::str_trim(tech_info)
tech_info
while(tech_info[i] != "Additional Information"){
laptop_details[j, 1] = tech_info[i]
laptop_details[j, 2] = tech_info[i+1]
i = i +2
j = j + 1
}
View(laptop_details)
which(tech_info == "Additional Information")
while(tech_info != "Additional Information"){
laptop_details[j, 1] = tech_info[i]
laptop_details[j, 2] = tech_info[i+1]
i = i +2
j = j + 1
}
View(laptop_details)
tech_details = []
while(tech_info[i] != "Additional Information"){
tech_details[[i]] = tech_info[j]
j = j + 2
i = i + 1
}
tech_details = list()
value = list()
while(tech_info[i] != "Additional Information"){
tech_details[[i]] = tech_info[j]
j = j + 2
i = i + 1
}
tech_info[66]
tech_info[66] != "Additional Information"
tech_info[66] == "Additional Information"
while(tech_info[i] != "Additional Information"){
tech_details[[i]] = tech_info[j]
j = j + 2
i = i + 1
}
limit = which(tech_info == "Additional Information")
for(i in 1:limit){
tech_details[[i]] = tech_info[j]
j = j+ 2
}
for(i in 1:limit){
tech_details[[i]] = tech_info[[j]]
j = j+ 2
}
tech_info[1]
tech_info[3]
j = 2
for(i in 1:limit){
tech_details[[i]] = tech_info[j]
j = j+ 2
}
getwd()
setwd(gsub("\\\\", "/", readClipboard()))
load("C:/Users/kswp234/Box Sync/3rd Rotation/GitHub/TidyTuesday/week34_nuclear_explosions/.RData")
View(nuclear_explosions)
View(nuclear_explosions)
library(lubridate)
library(tidyverse)
map_data('world')
install.packages('maps')
install.packages("maps")
library(maps)
maps()
map()
?borders
world_map = ggplot() +
borders(database = 'world', colour = 'grey50')
world_map
world_map +
geom_point(
aes(
x = nuclear_explosions$latitude,
y = nuclear_explosions$longitude
),
color = 'steelblue'
)
world_map +
geom_point(
aes(
x = nuclear_explosions$longitude,
y = nuclear_explosions$latitude
),
color = 'steelblue'
)
world_map = ggplot() +
borders(database = 'world', colour = 'grey50', fill = 'grey85')
world_map +
geom_point(
aes(
x = nuclear_explosions$longitude,
y = nuclear_explosions$latitude
),
color = 'steelblue'
)
world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper
),
color = 'steelblue',
alpha = 0.5
)
library(gganimate)
install.packages('gganimate')
library(gganimate)
animate_map = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper,
frame = date_long
),
color = 'steelblue',
alpha = 0.5
)
map_plot = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper,
),
color = 'steelblue',
alpha = 0.5
)
map_plot +
transition_time(long_date)
?renderers
install.packages('gifski')
map_plot +
transition_time(long_date)
map_plot +
transition_time(nuclear_explosions$long_date)
map_plot +
transition_time(nuclear_explosions$date_long)
animated_plot = map_plot +
transition_time(nuclear_explosions$date_long)
animate(animated_plot, fps = 0.5, rewind = TRUE)
animated_plot = map_plot +
transition_time(nuclear_explosions$date_long) +
ggtitle('Explosion Location',
subtitle = 'Date: {date_long}')
animate(animated_plot, fps = 5, rewind = TRUE)
warnings()
animated_plot = map_plot +
transition_time(nuclear_explosions$date_long) +
ggtitle('Explosion Location',
subtitle = 'Date: {nuclear_explosions$date_long}')
animate(animated_plot, fps = 5, rewind = TRUE)
library(glue)
animated_plot = map_plot +
transition_time(nuclear_explosions$date_long) +
ggtitle('Explosion Location',
subtitle = 'Date: {nuclear_explosions$date_long}')
animate(animated_plot, fps = 5, rewind = TRUE)
animated_plot = map_plot +
transition_time(nuclear_explosions$date_long) +
ggtitle(nuclear_explosions$date_long)
animate(animated_plot, fps = 5, rewind = TRUE)
map_plot = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper,
frame = date_long
),
color = 'steelblue',
alpha = 0.5
)
animated_plot = map_plot +
transition_time(nuclear_explosions$date_long) +
ggtitle('Nuclear Explosion Locations')
animate(animated_plot, fps = 5, rewind = TRUE)
map_plot = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper,
frame = date_long
),
color = 'steelblue',
alpha = 0.5
)
ani.options(interval = 0.2)
gganimate(map_plot)
animate(map_plot, fps = 5, rewind = TRUE)
animated_plot = map_plot +
transition_states(date_long, transition_length = 1, state_length = 30) +
ggtitle('Nuclear Explosion Locations',
subtitle = 'Year: {date_long}')
animate(map_plot, fps = 5, rewind = TRUE)
animate(animated_plot, fps = 5, rewind = TRUE)
ggtitle('Nuclear Explosion Locations',
subtitle = 'Year: {frame_time}')
animated_plot = map_plot +
transition_time(date_long) +
ggtitle('Nuclear Explosion Locations',
subtitle = 'Year: {frame_time}')
animate(animated_plot, fps = 5, rewind = TRUE)
animate(animated_plot, fps = 5, rewind = TRUE, height = 2000, width = 4000)
animate(animated_plot, fps = 5, rewind = TRUE)
anim_save('animation.gif', animated_plot)
load("C:/Users/kswp234/Box Sync/3rd Rotation/GitHub/TidyTuesday/week34_nuclear_explosions/.RData")
library(lubridate)
library(tidyverse)
library(ggthemes)
library(maps)
library(gganimate)
animate(animated_plot, fps = 5, rewind = TRUE)
map_plot = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper
),
color = 'orange',
alpha = 0.5
) +
labs(size = 'Yield Upper')
animated_plot = map_plot +
transition_time(date_long) +
ggtitle('Nuclear Explosion Locations',
subtitle = 'Year: {frame_time}')
animated_plot
map_plot = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper
),
color = 'orange',
alpha = 0.5
) +
labs(size = 'Yield Upper',
caption = 'source:tidytuesday')
animated_plot = map_plot +
transition_time(date_long) +
ggtitle('Nuclear Explosion Locations',
subtitle = 'Year: {frame_time}')
animate(animated_plot, fps = 2, rewind = TRUE)
anim_save('animation.gif', animated_plot)
ggplot( data = nuclear_explosions %>%
group_by(year) %>% summarize(n()) %>% rename(count = `n()`),
aes(x = year, y = count)
) +
geom_line() +
labs(title = 'Number of Nuclear Bombs detonated with year',
caption = 'source:tidytuesday') +
theme_wsj()
ggsave('bombs_with_year.jpeg')
load("C:/Users/kswp234/Box Sync/3rd Rotation/GitHub/TidyTuesday/week34_nuclear_explosions/.RData")
library(lubridate)
library(tidyverse)
library(ggthemes)
class(nuclear_explosions$date_long)
ggplot( data = nuclear_explosions %>%
group_by(year) %>% summarize(n()) %>% rename(count = `n()`),
aes(x = year, y = count)
) +
geom_line() +
labs(title = 'Number of Nuclear Bombs\n detonated with year',
caption = 'source:tidytuesday') +
theme_wsj()
ggsave('bombs_with_year.jpeg')
load("C:/Users/kswp234/Box Sync/3rd Rotation/GitHub/TidyTuesday/week34_nuclear_explosions/.RData")
library(maps)
library(gganimate)
library(lubridate)
library(tidyverse)
library(ggthemes)
map_plot = world_map +
geom_point(
data = nuclear_explosions,
aes(
x = longitude,
y = latitude,
size = yield_upper
),
color = 'orange',
alpha = 0.5
) +
labs(size = 'Yield Upper',
caption = 'source:tidytuesday')
animated_plot = map_plot +
transition_time(date_long) +
ggtitle('Nuclear Explosion Locations',
subtitle = 'Year: {frame_time}')
animate(animated_plot, fps = 2, rewind = TRUE)
anim_save('animation.gif', animated_plot)
